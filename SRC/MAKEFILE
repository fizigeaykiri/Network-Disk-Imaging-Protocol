#
# NDIP makefile
#
#
# Possible optimizations for 8088 class processors
#
# -oa   Relax alias checking
# -ob   Try to generate straight line code
# -oe - expand user functions inline (-oe=20 is default, adds lots of code)
# -oh   Enable repeated optimizations
# -oi   generate certain lib funcs inline
# -oi+  Set max inline depth (C++ only, use -oi for C)
# -ok   Flowing of register save into function flow graph
# -ol   loop optimizations
# -ol+  loop optimizations plus unrolling
# -or   Reorder for pipelined (486+ procs); not sure if good to use
# -os   Favor space over time
# -ot   Favor time over space
# -ei   Allocate an "int" for all enum types
# -zp2  Allow compiler to add padding to structs
# -zpw  Use with above; make sure you are warning free!
# -0    8088/8086 class code generation
# -s    disable stack overflow checking

# Make it fast.  But don't use -oe otherwise you'll need large model.

tcp_h_dir = TCPINC\
tcp_c_dir = ..\TCPLIB\
src_c_dir = .\
common_h_dir = INCLUDE\

memory_model = -mc
compile_options = -0 $(memory_model) -DCFG_H="MTCPTSTC.H" -oh -os -s -zp2 -zpw -we
#compile_options = -0 -DCFG_H="MTCPTSTC.H"
compile_options += -i=$(tcp_h_dir) -i=$(common_h_dir)


tcpobjs = packet.obj arp.obj eth.obj ip.obj tcp.obj tcpsockm.obj udp.obj utils.obj dns.obj timer.obj ipasm.obj
objs = mtcptstc.obj
ndipobjs = ndipcl.obj clsocket.obj diskpkt.obj diskread.obj 
ndipfplyobjs = ndipflpy.obj diskread.obj
testobjs = tests.obj diskpkt.obj diskread.obj
errormapobjs = errormap.obj diskread.obj

all : clean ndipcl.exe

clean : .symbolic
  @del mtcptstc.exe
  @del ndipcl.exe
  @del *.obj
  @del *.map

patch : .symbolic
#  ..\utils\patch mtcptstc.exe mtcptstc.map $(memory_model)
  ..\utils\patch ndipcl.exe ndipcl.map $(memory_model)

.asm : $(tcp_c_dir)

.cpp : $(tcp_c_dir)

#.cpp : $(src_c_dir)

.asm.obj :
  wasm -0 $(memory_model) $[*

.cpp.obj :
  wpp $[* $(compile_options)


mtcptstc.exe: $(tcpobjs) $(objs)
  wlink system dos option map option stack=4096 name $@ file *.obj

ndipcl.exe: $(ndipobjs) $(tcpobjs) 
  wlink system dos option map option stack=4096 name $@ file *.obj

ndipflpy.exe: $(ndipfplyobjs)
  wlink system dos option map option stack=4096 name $@ file *.obj

errormap.exe: $(errormapobjs)
  wlink system dos option map option stack=4096 name $@ file *.obj
  
tests.exe: $(testobjs)
    wlink system dos option map option stack=4096 name $@ file *.obj
    
